cmd importante => docker exec -it leubeach-backend-1 php artisan migrate

comprend et faire me systeme de connexion inscription de laravel, etablir les niveau de permission en fonction de 

apporter tailwind avec les cdn plus simple 

pour commencer et faire focntionne rles donnes faire la page de connexion avec enregistrement de l'utilisateur, fazire focntionner l'api et les retoru d'erreur pour plus de faciliter par la suite 

une fois connexion inscription fait avec a pi er retour de view avec react, tester comme vue en cour, implementer des test pertinet sur le front avec la page de connexion et l'accueil et les test coté back implementer les test cote back egalement 

integrer le deploiement continue avec git hub actoi ou autre 

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
FRONTED
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

implementer un theme dark

Faire les differentes pages:

- page de connecion, enregistrement
- page d'accueil (Résume ce que fait l'app, presente les derniere news, le nombre de terrain dispo et reserver)
- page reservation des terrains (affiche le terrain en general decouper, et la possilibter de les reserver, systeme de calendrier)
- page des evenements (affiche les evenement a venir)
- page des association (affiche les association membres et ce qu'elle font, quand clique sur un asso, description de ce que fait l'asso et qui est le president avec son conatact mail ou tel)
- page social, obj trouver, signaler qqechose (pade fait divers sur st leu et ce qui peux s'y passer)
- pade de profile/dashborad user (affiche les information utilisateur, sont role, reflechir a dautre choses)

featurs:

- faire un settings ou possibiliter de changer le theme
- dashborad pour admin
- dashborad pour asso
- dashborad pour user

Note:

essayer de faire de l'annimation avec G-sap


-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
BACKEND
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

setpup de l'api avec connexion a la bdd
generer la cle unique de Laravel
faire les migartion
demarer le serveur 

cree l'API avec Laravel
cree le systeme de connexion
reprendre la base de donne
cree la base de donnes en mysql

faire apparaitre la personne connecter cree une sesssion,

plusieurs niveau de permision, maxime super amdin etc

cree la possibiliter de cree une asso

changer la couleur de la bar de navigation

cree une page pour ajouter et afficher les association 

faire pareil pour les evenement en correclation averc les asso etc

page de blog

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
STRUCTURE DE BASE POUR API
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
Après avoir installé un nouveau projet Laravel avec la commande composer create-project laravel/laravel example-app, voici les étapes générales pour commencer à développer votre projet, spécialement si vous envisagez de l'utiliser comme une API :

Configuration de l'Environnement
Configurer les variables d'environnement : Ouvrez le fichier .env à la racine de votre projet et configurez les variables d'environnement nécessaires. Cela inclut souvent les détails de connexion à la base de données (DB_DATABASE, DB_USERNAME, DB_PASSWORD, etc.).

Générer une clé d'application : Exécutez la commande php artisan key:generate pour générer une clé d'application sécurisée. Cette clé est utilisée pour chiffrer les sessions et d'autres informations sensibles.

Structure de Base pour une API
Si votre application Laravel doit fonctionner principalement sous forme d'API, vous devriez prendre en compte les points suivants :

Routes API : Laravel stocke les routes pour les API dans le fichier routes/api.php. Les routes définies ici sont automatiquement préfixées avec /api. Utilisez ce fichier pour définir toutes les routes liées à votre API.

Contrôleurs : Créez des contrôleurs spécifiques à votre API pour gérer la logique de l'application. Utilisez la commande artisan php artisan make:controller Api/YourControllerName pour générer un nouveau contrôleur dans un espace de nommage spécifique à l'API.

Middleware : Si vous avez besoin d'une authentification pour votre API, Laravel propose plusieurs options, y compris Laravel Sanctum et Laravel Passport, qui sont bien adaptées pour les API sécurisées.

Ressources et Collections : Pour transformer vos modèles en JSON de manière personnalisée, vous pouvez utiliser des Ressources et Collections. Elles vous permettent de contrôler exactement les données que vous souhaitez exposer via votre API.

Authentification API
Laravel Sanctum : Pour une API simple qui nécessite l'authentification via tokens ou SPA (Single Page Application), Sanctum est une excellente option. Installez Sanctum via Composer et suivez la documentation pour le mettre en place.

Laravel Passport : Pour une solution OAuth2 plus complète, Laravel Passport est le package recommandé. Il est particulièrement utile pour les API qui seront consommées par des applications tierces.

Test de l'API
Postman ou Insomnia : Utilisez des outils comme Postman ou Insomnia pour tester vos endpoints d'API et vous assurer qu'ils fonctionnent comme prévu.
Migration et Seeders
Création de bases de données : Utilisez les migrations pour définir la structure de votre base de données. Exécutez php artisan migrate pour appliquer vos migrations.

Peuplement de la base de données : Les seeders peuvent être utilisés pour peupler la base de données avec des données de test. Créez des seeders avec php artisan make:seeder YourSeeder et exécutez-les avec php artisan db:seed.

Ces étapes constituent une base solide pour démarrer le développement de votre application Laravel sous forme d'API. Assurez-vous de consulter la documentation officielle de Laravel pour des détails plus spécifiques sur chaque composant mentionné.



